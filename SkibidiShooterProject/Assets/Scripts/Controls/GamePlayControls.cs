//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls/GamePlayControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamePlayControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamePlayControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamePlayControls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""48cc6593-90dd-463c-bcbe-e7036955f94a"",
            ""actions"": [
                {
                    ""name"": ""cameraRot"",
                    ""type"": ""Value"",
                    ""id"": ""ab13bd42-3941-47ff-80de-69e550f812fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""cameraRotnoMov"",
                    ""type"": ""Value"",
                    ""id"": ""eeded921-3f07-4b68-a6ff-31504766d262"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""cameraMoveRot2"",
                    ""type"": ""Value"",
                    ""id"": ""46755e10-bffd-4765-8a37-bbbd6b2d8f82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82e5daf6-ec19-49e6-97c0-81a240d8035e"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cameraRot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ca59680-4904-45f5-8c48-b0947a2c17fc"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cameraRot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ced1cac-c0b1-42f3-8a6b-ee7bdf27d42d"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cameraRotnoMov"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bd358eb-b6e1-43a1-bb45-11eff5fa6afb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cameraRotnoMov"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c43a37b4-219b-4ea7-a4d9-c380d8c0fccb"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cameraMoveRot2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_cameraRot = m_Game.FindAction("cameraRot", throwIfNotFound: true);
        m_Game_cameraRotnoMov = m_Game.FindAction("cameraRotnoMov", throwIfNotFound: true);
        m_Game_cameraMoveRot2 = m_Game.FindAction("cameraMoveRot2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_cameraRot;
    private readonly InputAction m_Game_cameraRotnoMov;
    private readonly InputAction m_Game_cameraMoveRot2;
    public struct GameActions
    {
        private @GamePlayControls m_Wrapper;
        public GameActions(@GamePlayControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @cameraRot => m_Wrapper.m_Game_cameraRot;
        public InputAction @cameraRotnoMov => m_Wrapper.m_Game_cameraRotnoMov;
        public InputAction @cameraMoveRot2 => m_Wrapper.m_Game_cameraMoveRot2;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @cameraRot.started += instance.OnCameraRot;
            @cameraRot.performed += instance.OnCameraRot;
            @cameraRot.canceled += instance.OnCameraRot;
            @cameraRotnoMov.started += instance.OnCameraRotnoMov;
            @cameraRotnoMov.performed += instance.OnCameraRotnoMov;
            @cameraRotnoMov.canceled += instance.OnCameraRotnoMov;
            @cameraMoveRot2.started += instance.OnCameraMoveRot2;
            @cameraMoveRot2.performed += instance.OnCameraMoveRot2;
            @cameraMoveRot2.canceled += instance.OnCameraMoveRot2;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @cameraRot.started -= instance.OnCameraRot;
            @cameraRot.performed -= instance.OnCameraRot;
            @cameraRot.canceled -= instance.OnCameraRot;
            @cameraRotnoMov.started -= instance.OnCameraRotnoMov;
            @cameraRotnoMov.performed -= instance.OnCameraRotnoMov;
            @cameraRotnoMov.canceled -= instance.OnCameraRotnoMov;
            @cameraMoveRot2.started -= instance.OnCameraMoveRot2;
            @cameraMoveRot2.performed -= instance.OnCameraMoveRot2;
            @cameraMoveRot2.canceled -= instance.OnCameraMoveRot2;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnCameraRot(InputAction.CallbackContext context);
        void OnCameraRotnoMov(InputAction.CallbackContext context);
        void OnCameraMoveRot2(InputAction.CallbackContext context);
    }
}
